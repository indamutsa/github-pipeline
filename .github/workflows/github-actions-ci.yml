# Name of the workflow: Node js app deploy to EKS
name: Node js app deploy to EKS

# Events that trigger the workflow
on:
  push:
    branches: [ "main" ] # Trigger the workflow on a push to the main branch
  pull_request:
    branches: [ "main" ] # Trigger the workflow on a pull request to the main branch

# Jobs that run as part of the workflow
jobs:
  deploy:
    runs-on: ubuntu-latest # The environment to run the job on
    steps:
    - name: Checkout code # Checkout the code from the repository
      uses: actions/checkout@v3 # Use version 3 of the GitHub Actions checkout action

    - name: Install kubectl # Install kubectl for managing Kubernetes clusters
      uses: azure/setup-kubectl@v2.0 # Use version 2.0 of the Azure/setup-kubectl action
      with:
        version: 'v1.24.0' # Set the version of kubectl to install

    - name: Configure AWS Credentials # Configure the AWS credentials for the job
      uses: aws-actions/configure-aws-credentials@v1 # Use version 1 of the AWS-actions/configure-aws-credentials action
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }} # Set the AWS access key ID from the secrets
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }} # Set the AWS secret access key from the secrets
        aws-region: us-east-2 # Set the AWS region to use

    - name: Login to Amazon ECR # Login to Amazon ECR to push the Docker image
      id: login-ecr # Set an ID for the action
      uses: aws-actions/amazon-ecr-login@v1 # Use version 1 of the AWS-actions/amazon-ecr-login action

    - name: Build, tag, and push docker image to Amazon ECR # Build, tag and push the Docker image to Amazon ECR
      env:
        REGISTRY: ${{ steps.login-ecr.outputs.registry }} # Get the ECR registry URL from the output of the previous step
        REPOSITORY: arsene_learning # Set the name of the ECR repository
        IMAGE_TAG: 1.1 # Set the tag for the Docker image
      run: |
        docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG . # Build the Docker image
        docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG # Push the Docker image to ECR

    - name: Update kube config # Update the kubeconfig file with the EKS cluster details
      run: aws eks update-kubeconfig --name arsene_learning # Use the AWS CLI to update the kubeconfig file

    - name: Deploy to EKS # Deploy the application to EKS
      run: |
        kubectl apply -f deployment.yaml # Deploy the Kubernetes deployment
        kubectl apply -f service.yaml # Deploy the Kubernetes service


# -----------------------------------------------

# name: Node js app deploy to EKS
# on:
#   push:
#     branches: [ "main" ]
#   pull_request:
#     branches: [ "main" ]

# jobs:
#   deploy:
#     runs-on: ubuntu-latest
#     steps:
#     - name: Checkout code
#       uses: actions/checkout@v3

#     - name: Install kubectl
#       uses: azure/setup-kubectl@v2.0
#       with:
#         version: 'v1.24.0' # default is latest stable
#       id: install

#     - name: Configure AWS Credentials
#       uses: aws-actions/configure-aws-credentials@v1
#       with:
#         aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#         aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#         aws-region: us-east-2

#     - name: Login to Amazon ECR
#       id: login-ecr
#       uses: aws-actions/amazon-ecr-login@v1

#     - name: Build, tag, and push docker image to Amazon ECR
#       env:
#         REGISTRY: ${{ steps.login-ecr.outputs.registry }}
#         REPOSITORY: arsene_learning
#         IMAGE_TAG: 1.1
#       run: |
#         docker build -t $REGISTRY/$REPOSITORY:$IMAGE_TAG .
#         docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG

#     - name: Update kube config
#       run: aws eks update-kubeconfig --name arsene_learning
    
#     - name: Deploy to EKS
#       run: |
#         kubectl apply -f deployment.yaml
#         kubectl apply -f service.yaml